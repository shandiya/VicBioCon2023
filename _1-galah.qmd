# {galah} {#galah .galah-breaks data-menu-title="galah" background-color="#e9317f"}

::: {.notes}
The first project I wanted to introduce is the {galah} package, which acts as an interface to the 
biodiversity data in the ALA. The majority of these data consist of species occurrence records...
:::



##  {#sp-occ .galah data-menu-title="Species Occurrence"}

#### 2020-09-23
![](images/whale.tiff){.absolute top="20px" left="380px" width="700px"}
![](images/whale_map.tiff){.absolute bottom="200px" left="1000px" height="500px"}

::: {.notes}
...so, evidence of a taxon in a particular time and place. It's possible to get these records through the website, but one of the main advantages of using {galah} is that it makes the query reproducible. It's also implemented in both R and Python- the R version currently has more functionality but a fully-fledged Python release is going to be happening very soon. 
:::

## Counts of records {#counts .galah data-menu-title="atlas_counts()"}

::: {.columns .v-center-container}
::: {.column width="100%"}
::: {.panel-tabset}
```{r}
#| echo: false
#| message: false
#| warning: false

library(galah)
galah_config(email = Sys.getenv("email"), verbose = FALSE)
```

### R
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "|1|3|4|"
#| output-location: column-fragment

library(galah)

galah_call() |>
  atlas_counts()

```

### Python
```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "|"

import galah
galah.atlas_counts()

```
:::
:::
:::

::: {.notes}
I'll run through some examples using the R syntax, but the Python code is here in this tab, and these slides are available online. 

So, start by loading the package, and every query begins with galah_call(), 
which tells the API what we want. A lot of the syntax is similar to using dplyr, so if you're familiar with the tidyverse this will be quite straightforward. The next line specifies what we want - here, atlas_counts() will retrieve counts of records. Voila, we're told that there are just over 113 million records in the ALA. But we don't always want everything, everywhere, all at once. So here are some functions that allow us to construct more specific queries  
:::



## Identify taxa {#identify .galah data-menu-title="galah_identify()"}

::: {.columns .v-center-container}
::: {.column width="100%"}
::: {.panel-tabset}

### R
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "|4|"
#| output-location: column-fragment

library(galah)

galah_call() |>
  galah_identify("pardalotus") |>
  atlas_counts()

```

### Python
```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "|"

import galah
galah.atlas_counts(taxa="pardalotus")

```
:::

![](images/pardalotes/spotted.tiff){.absolute bottom="50px" right="100px" height="150px"}
![](images/pardalotes/forty-spotted.tiff){.absolute bottom="50px" right="300px" height="150px"}
![](images/pardalotes/striated.tiff){.absolute bottom="50px" right="500px" height="150px"}
![](images/pardalotes/red-browed.tiff){.absolute bottom="50px" right="700px" height="150px"}
:::
:::

::: {.notes}
galah_identify() lets us specify one or more taxa - here, I've asked for the 
genus pardalotus. Over a million pardalote records
:::



## Filter records {#filter .galah data-menu-title="galah_filter()"}

::: {.columns .v-center-container}
::: {.column width="100%"}
::: {.panel-tabset}

### R
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "|5-6|"
#| output-location: column-fragment

library(galah)

galah_call() |>
  galah_identify("pardalotus") |>
  galah_filter(year >= 2020, 
               stateProvince == "Tasmania") |> 
  atlas_counts()

```

### Python
```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "|"

import galah
galah.atlas_counts(
    taxa="pardalotus",
    filters=["year >= 2020", "stateProvince == Tasmania"]
)

```
:::

![](images/pardalotes/spotted.tiff){.absolute bottom="50px" right="100px" height="150px"}
![](images/pardalotes/forty-spotted.tiff){.absolute bottom="50px" right="300px" height="150px"}
![](images/pardalotes/striated.tiff){.absolute bottom="50px" right="500px" height="150px"}
:::
:::

::: {.notes}
galah_filter() applies filters to different fields - here, I've specified records 
from 2020 onwards, from Tasmania. Down to 7000 records. But maybe you want to know if there are different species in there, or if the counts change over the years...
:::


## Group counts {#group .galah data-menu-title="galah_group_by()"}

::: {.columns .v-center-container}
::: {.column width="100%"}
::: {.panel-tabset}

### R
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "|7|"
#| output-location: column-fragment

library(galah)

galah_call() |>
  galah_identify("pardalotus") |>
  galah_filter(year >= 2020, 
               stateProvince == "Tasmania") |> 
  galah_group_by(year, species) |>
  atlas_counts()

```

### Python
```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "|"

import galah
galah.atlas_counts(
    taxa="pardalotus",
    filters=["year >= 2020", "stateProvince == Tasmania"],
    group_by=["year","species"]
)

```
:::

![](images/pardalotes/spotted-flip.tiff){.absolute bottom="50px" left="100px" height="150px"}
![](images/pardalotes/forty-spotted-flip.tiff){.absolute bottom="50px" left="300px" height="150px"}
![](images/pardalotes/striated-flip.tiff){.absolute bottom="50px" left="500px" height="150px"}
:::
:::

::: {.notes}
group_by() lets you group counts by the fields you specify - here, year and species. We can see that there are 3 species, and there's quite a difference in the number of records.
:::



## Download occurrences {#download .galah data-menu-title="atlas_occurrences()"}

::: {.columns .v-center-container}
::: {.column width="100%"}
::: {.panel-tabset}

### R
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "|2,8|"
#| output-location: column-fragment

library(galah)
galah_config(email = "shandiya.b@gmail.com")

galah_call() |>
  galah_identify("pardalotus") |>
  galah_filter(year >= 2020, 
               stateProvince == "Tasmania") |> 
  atlas_occurrences()
```

### Python 
```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "|"

import galah
galah.galah_config(email="shandiya.b@gmail.com")
galah.atlas_occurrences(
    taxa="pardalotus",
    filters=["year >= 2020", "stateProvince == Tasmania"]
)

```
:::

![](images/pardalotes/spotted-flip.tiff){.absolute bottom="50px" left="100px" height="150px"}
![](images/pardalotes/forty-spotted-flip.tiff){.absolute bottom="50px" left="300px" height="150px"}
![](images/pardalotes/striated-flip.tiff){.absolute bottom="50px" left="500px" height="150px"}
:::
:::

::: {.notes}
To download these records and have a look at them in more detail, 
we can switch from atlas_counts() to atlas_occurrences(). Downloading records also
requires that we provide the email we used to register with the ALA. This is a bit truncated, but we can see that the download consists of 7000+ rows and 8 columns. 
:::



## Select fields {#select .galah data-menu-title="galah_select()"}

::: {.columns .v-center-container}
::: {.column width="100%"}
::: {.panel-tabset}

### R
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "|8-10|"
#| output-location: column-fragment

library(galah)
galah_config(email = "shandiya.b@gmail.com")

galah_call() |>
  galah_identify("pardalotus") |>
  galah_filter(year >= 2020, 
               stateProvince == "Tasmania") |> 
  galah_select(species, 
               year, 
               dataResourceName) |> 
  atlas_occurrences()

```

### Python 
```{python}
#| echo: true
#| eval: false
#| code-line-numbers: "|"

import galah
galah.galah_config(email="shandiya.b@gmail.com")
galah.atlas_occurrences(
    taxa="pardalotus",
    filters=["year >= 2020", "stateProvince == Tasmania"],
    fields=["species","year","decimalLatitude","decimalLongitude"]
)

```
:::

![](images/pardalotes/spotted-flip.tiff){.absolute bottom="50px" left="100px" height="150px"}
![](images/pardalotes/forty-spotted-flip.tiff){.absolute bottom="50px" left="300px" height="150px"}
![](images/pardalotes/striated-flip.tiff){.absolute bottom="50px" left="500px" height="150px"}
:::
:::

::: {.notes}
We might not want all the columns that are included in the default download, or we might want some different ones; we can specify this with galah_select() - here, we have records with information about species, year, and the data provider. 
:::



## Geolocate {#geolocate .galah data-menu-title="galah_geolocate()"}

::: {.columns .v-center-container}
::: {.column width="100%"}
::: {.panel-tabset}

### R
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: "|1-2|4-6|8-11|"
#| output-location: column-fragment

library(galah)
library(sf)

melb <- st_read("data/metro_region.shp", 
                quiet = TRUE) |> 
  st_simplify(dTolerance = 1000)

galah_call() |> 
  galah_identify("pardalotus") |> 
  galah_geolocate(melb) |> 
  atlas_counts()

```

![](images/metro_outline.tiff){.absolute bottom="10px" right="10px"}

### Python
Watch this space!
:::
:::
:::

::: {.notes}
{galah} also lets you search within a bespoke location; with galah_geolocate, you 
can provide a shapefile, well known text string, bounding box, or simple features object. In this example here, we load the {sf} package, then read in a shapefile of the melbourne metro region. Then it's' just a case of providing this as an argument to galah_geolocate, and we have 93 thousand pardalotes ever recorded in Melbourne. 
:::



##  {#galah-url .links data-menu-title="{galah} URL"}

::: {.columns .v-center-container}
::: {.column width="10%"}
:::

::: {.column width="15%"}
![](images/logos/galah_logo.png)
:::

::: {.column width="50%"}
[galah.ala.org.au](https://galah.ala.org.au)
:::
:::

::: {.notes}
This is just some of the functionality of the package, there's lots of other cool 
things that you can do with it, like apply data quality profiles, or query other 
living atlases, and that's all documented on the website. 
:::